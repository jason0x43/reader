name: Test and Deploy
on:
  push:
    branches: [main]

jobs:
  test_and_deploy:
    name: Test and deploy

    runs-on: ubuntu-latest

    env:
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_REPO: ${{ secrets.DEPLOY_REPO }}

    steps:
      - name: Checkout the app repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8.0.0

      - name: Get pnpm store
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install app dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      #- name: Setup SSH
      #  run: |
      #    mkdir -p ~/.ssh/
      #    echo "$SSH_KEY" > ~/.ssh/staging.key
      #    echo "$SSH_HOST_KEY" > ~/.ssh/known_hosts
      #    chmod 600 ~/.ssh/staging.key
      #    cat >>~/.ssh/config <<END
      #    Host staging
      #      HostName $SSH_HOST
      #      User $SSH_USER
      #      IdentityFile ~/.ssh/staging.key
      #      StrictHostKeyChecking no
      #    END
      #  env:
      #    SSH_USER: ${{ secrets.DEPLOY_USER }}
      #    SSH_KEY: ${{ secrets.DEPLOY_KEY }}
      #    SSH_HOST: ${{ secrets.DEPLOY_HOST }}
      #    SSH_HOST_KEY: ${{ secrets.DEPLOY_HOST_KEY }}

      #- name: Build and deploy app
      #  run: |
      #    docker build --platform linux/amd64 -t $APP_NAME --target app .
      #    ssh staging "cd $DOCKER_DIR && docker compose rm -fs $APP_NAME"
      #    docker save $APP_NAME | ssh staging "docker load"
      #    ssh staging "cd $DOCKER_DIR && docker compose up -d $APP_NAME"
      #  env:
      #    APP_NAME: simple-news-app
      #    DOCKER_DIR: ${{ secrets.DOCKER_DIR }}

      #- name: Build and deploy downloader
      #  run: |
      #    docker build --platform linux/amd64 -t $APP_NAME --target downloader .
      #    ssh staging "cd $DOCKER_DIR && docker compose rm -fs $APP_NAME"
      #    docker save $APP_NAME | ssh staging "docker load"
      #    ssh staging "cd $DOCKER_DIR && docker compose up -d $APP_NAME"
      #  env:
      #    APP_NAME: simple-news-downloader
      #    DOCKER_DIR: ${{ secrets.DOCKER_DIR }}
