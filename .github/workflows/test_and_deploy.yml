name: Test and Deploy
on:
  push:
    branches: [main]

jobs:
  test_and_deploy:
    name: Test and deploy

    runs-on: ubuntu-latest

    env:
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_REPO: ${{ secrets.DEPLOY_REPO }}

    steps:
      - name: Checkout the app repo
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.8.0

      - name: Get pnpm store
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install app dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          echo "$SSH_HOST_KEY" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.DEPLOY_USER }}
          SSH_KEY: ${{ secrets.DEPLOY_KEY }}
          SSH_HOST: ${{ secrets.DEPLOY_HOST }}
          SSH_HOST_KEY: ${{ secrets.DEPLOY_HOST_KEY }}

      - name: Build app
        run: >-
          echo ">>> Building image..."
          docker build --platform linux/amd64 -t $APP_NAME --target app . &&
          echo ">>> Saving image..."
          docker save -o $APP_NAME.tar $APP_NAME &&
          echo ">>> Copying image to deploy host..."
          scp $APP_NAME.tar staging: &&
          echo ">>> Running deployment commands..."
        env:
          APP_NAME: simple-news-app

      - name: Deploy app
        run: |
          ssh staging <<END
          cd $DOCKER_DIR
          docker compose rm -fs $APP_NAME 
          docker image rm -f $APP_NAME
          docker load -i $APP_NAME.tar
          docker compose up -d $APP_NAME
          END
        env:
          APP_NAME: simple-news-app
          DOCKER_DIR: ${{ secrets.DOCKER_DIR }}

      # - name: Deploy downloader
      #   run: >-
      #     docker build --platform linux/amd64 -t $APP_NAME --target downloader &&
      #     docker save -o $APP_NAME.tar $APP_NAME &&
      #     scp $APP_NAME.tar staging: &&
      #     ssh staging "cd $DOCKER_DIR && docker compose down $APP_NAME" &&
      #     ssh staging "docker load -i $APP_NAME.tar" &&
      #     ssh staging "cd $DOCKER_DIR && docker compose up -d $APP_NAME" &&
      #   env:
      #     DOCKER_DIR: ${{ secrets.DOCKER_DIR }}
      #     APP_NAME: simple-news-downloader

      # - name: Update app source
      #   run: ssh staging "cd $REPO && git fetch && git reset --hard origin/main"
      #   env:
      #     REPO: ${{ secrets.DEPLOY_REPO }}

      # - name: Restart app
      #   run: ssh staging "cd $DOCKER_DIR && docker compose up --build -d $APP_CONTAINER $DL_CONTAINER"
      #   env:
      #     DOCKER_DIR: ${{ secrets.DOCKER_DIR }}
      #     APP_CONTAINER: ${{ secrets.APP_CONTAINER }}
      #     DL_CONTAINER: ${{ secrets.DL_CONTAINER }}
